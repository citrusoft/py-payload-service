# coding: utf-8

"""
    Payload API

    An API to manage transportation payload with the the following operations: * List all Payloads * Create a Payload (aka Route) * Get Payload Estimate * Update Payload with Actual * Delete a Payload  Features: * Result pagination * Security (Auth'n / Auth'z)  We will use a simple **Payload** resource representation with the following properties: * ID (Route, aka Flight) * Passengers (count) * Baggage (weight) * Cargo (weight) * EstimateDateTimestamp (optional) * LastUpdateTimestamp (optional) 

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Payload(BaseModel):
    """
    Payload
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Payload identifier")
    passengers: Optional[StrictInt] = Field(default=None, description="Passenger count.")
    baggage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Weight of passengers baggage.")
    cargo: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Weight of cargo.")
    estimate4_timestamp: Optional[datetime] = Field(default=None, description="The time and date this estimate is for.", alias="estimate4Timestamp")
    last_updated_on: Optional[datetime] = Field(default=None, description="Timestamp of last estimate update", alias="lastUpdatedOn")
    __properties: ClassVar[List[str]] = ["id", "passengers", "baggage", "cargo", "estimate4Timestamp", "lastUpdatedOn"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Payload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "estimate4_timestamp",
                "last_updated_on",
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Payload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "passengers": obj.get("passengers"),
            "baggage": obj.get("baggage"),
            "cargo": obj.get("cargo"),
            "estimate4Timestamp": obj.get("estimate4Timestamp"),
            "lastUpdatedOn": obj.get("lastUpdatedOn")
        })
        return _obj


